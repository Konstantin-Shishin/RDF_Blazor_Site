Комментарии к пробному проекту CDService

CDService - это Cassette Data Service. Это сервис информационной базы (данных) и некоторые простые средства
доступа к этип данным. Простые средства реализуются html-интерфейсом и javascript - AJAX. Можно попробовать. 
Только переведу проект в решение PolarArchiving. Поставил, проверил, работает. 

Теперь надо двигаться к нужному интерфейсу для базы данных и к сервису.

Первый главный интерфейс - задание id айтема и получение его портрета

А как все раньше работало? Напомню форматный подход.
<record id="p_ivanov_ii" type="person">
	<field prop="name" >Иванов Иван Иванович</field>
	<direct prop="father">
		<record id="p_ivanov_ip">
			<field prop="name" >Иванов Иван Петрович</field>
		</record>
	</direct>
	<inverse prop="participant">
		<record id="part_2873">
			<direct prop="in-org">
				<record id="o_nsu">
					<field prop="name" >Новосибирский государственный университет</field>
				</record>
			</direct>
		</record>
	</inverse>
</record>

Как-то так...
Теперь зададимся вопросом: какой может быть более экономная форма записи подобной конструкции?
Берем Поляр, можно сформулировать типы:
Record = {id: String, type: String, arcs: [Arc]};
Arc = empty^none,
	field^{prop: String, value: String},
	direct^{prop: String, rec: Record},
	inverse^{prop: String, recs: [Record]};

В объектном представлении JSON это будет выглядеть проще:
record = {"id": "p_ivanov_ii", "type": "uri", "arcs": 
			[
				{"v":"field", "prop": "name", "value": "Иванов Иван Иванович"},
				{"v":"direct", "prop": "father", "record": 
					{"id": "p_ivanov_ip", "type": "person", "arcs": 
						[{"v":"field", "prop": "name", "value": "Иванов Иван Петрович"}]
					}
				},
				{"v":"inverse", "prop": "participant", "records": 
					{
						{"id": "part_2873", "type":"participation" "arcs": 
							[
								{"v":"direct", "prop": "in-org", "record":
									{"id": "o_nsu", "type": "org-sys", "arcs":
										[{"v":"field", "prop": "name", "value": "НГУ"}]
									}
								}
							]
						}
					}
				}
			]
		}

Совершенно нет ощущения, что эта запись компактнее записи в XML. Интересно, а XML я могу передавать?

Зато с XML-ем труднее работать в JavaScript.

Как использовать JSON значения? В принципе, поля нужны для текстового содержимого, идентификаторы
- для ссылок, типы - для классификации, названия свойств - для имен столбцов. Текстовая развертка
определяется для записи и для дуги.

Для записи делается маркер, напр. '@', на него навешивается гиперссылка, потом (другим цветом) 
ставится метка типа, потом идет перечисление дуг. В дуге (другим цветом) ставится label свойства 
с учетом направления, потом делается развертка самого свойства или свойств, для обратных дуг.

Запись можно отобразить в таблицу, можно в систему таблиц. 

С некоторым трудом разобрался в азах JavaScript по работе с JSON. Теперь можно что-по попробовать. 

Сервис начинает "дышать". Вроде даже довольно быстро. Теперь хорошо бы его проверить, а потом показать Пете. 




